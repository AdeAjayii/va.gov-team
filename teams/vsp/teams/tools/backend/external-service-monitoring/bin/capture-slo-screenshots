#!/usr/bin/env ruby

# frozen_string_literal: true

$threads = []

SCRIPT_VERSION     = '0.0.3'
PROFILE_NAME       = ENV['PROFILE_NAME'] || 'dev-edition-default'
GRAFANA_BASE_URL   = 'http://grafana.vfs.va.gov/d/pEgVdRlZk/external-service-performance-indicators'
LINUX_FIREFOX_PATH = '/opt/firefox/firefox'
OSX_FIREFOX_PATH   = '/Applications/Firefox.app/Contents/MacOS/firefox'

require 'bundler/inline'
require 'rbconfig'
gemfile do
  source 'https://rubygems.org'

  ruby RUBY_VERSION || '2.6'

  gem 'json'
  gem 'pastel'
  gem 'pry'
  gem 'tty-spinner'
  gem 'watir'
  gem 'webdrivers', '4.4.1'
end

# SLOReporter
class SLOReporter
  attr_accessor :browser, :backend, :board_url, :tmpfile, :shot_filename

  def initialize(browser, backend)
    @browser, @backend = browser, backend
    @board_url = GRAFANA_BASE_URL + query_params
    @tmpfile   = 'tmp/screenshots/' + backend + 'tmp.png'
    @shot_filename = 'tmp/screenshots/' + backend + '_slo_screenshot.png'
  end

  def query_params
    "?orgId=1&var-backend=#{backend}"
  end

  def capture_and_compress_screenshot
    return if File.exists? shot_filename

    capture_screenshot unless File.exists? tmpfile
    compress_screenshot
  end

  def remove_elements_from_page
    css_selector = '.sidemenu, .navbar, .submenu-controls'
    browser.execute_script(
      "[...document.querySelectorAll('#{css_selector}')].map(e => {e.parentNode.removeChild(e)})"
    )
  end

  def capture_screenshot
    browser.goto board_url

    # Dumb hack for waiting until the last board is loaded
    browser.div(aria_label: /50th Percentile Latency over Time/).wait_until(&:present?)
    sleep 50

    remove_elements_from_page

    browser.screenshot.save tmpfile
  end

  def compress_screenshot
    $threads << Thread.new do
      system "pngcrush -reduce -brute #{tmpfile} #{shot_filename} && \
              rm #{tmpfile}"
    end
    shot_filename
  end
end

spinner = TTY::Spinner.new("[:spinner] Rustlin' up a phantom 'fox ...", format: :burger)

#### Configure the driver based on OS
host_os = RbConfig::CONFIG['host_os']
path = case host_os
       when /darwin|mac os/
         OSX_FIREFOX_PATH
       when /linux/
         LINUX_FIREFOX_PATH
       else
         raise Error::WebDriverError, "unknown os: #{host_os.inspect}"
       end

begin
  Selenium::WebDriver::Firefox::Binary.path = path
rescue Selenium::WebDriver::Error::WebDriverError
  puts 'Cannot find binary for Firefox...'
  exit 1
end

Watir.default_timeout = 120
options = Selenium::WebDriver::Firefox::Options.new

begin
  # TODO: Create a template/skeleton profile to include here
  # TODO: This ONLY works if you open `about:profiles` in a different profile window. Not sure why.
  default_profile = Selenium::WebDriver::Firefox::Profile.from_name PROFILE_NAME

  default_profile['network.proxy.type'] = 1
  default_profile['network.proxy.socks'] = '127.0.0.1'
  default_profile['network.proxy.socks_port'] = 2001
  default_profile['network.proxy.socks_remote_dns'] = true
  default_profile['network.proxy.no_proxies_on'] = 'www.googletagmanager.com, www.google-analytics.com'

  options.profile = default_profile
  # options.headless!

  driver  = Selenium::WebDriver.for :firefox, options: options
  browser = Watir::Browser.new driver
rescue Errno::ENOENT => e
  puts e
  puts PROFILE_NAME
  puts 'ðŸ¦Š Close all instances of Firefox and try again...'
  puts 'It may be necessary to go to \'about:profiles\''
  exit 1
rescue Selenium::WebDriver::Error::UnknownError => e
  puts e
  puts 'ðŸ§¦ Check SOCKS is enabled and try again...'
  exit 1
end

system "mkdir -p tmp/screenshots"

spinner.success('Ready for capture!')

browser.goto GRAFANA_BASE_URL
browser.window.resize_to(1440, 1440)
if browser.link(visible_text: /Sign in with GitHub/).exists?
  browser.link(visible_text: /Sign in with GitHub/).click
end

overview = 'tmp/screenshots/all-overview.png'
availability = 'tmp/screenshots/availability-overview.png'
browser.link(visible_text: /All/).click
backends = browser.execute_script(
  "return Array.from(document.querySelectorAll('.variable-value-dropdown a > span:last-of-type')).map(e => e.innerText).filter(String)"
).drop(1)
browser.div(visible_text: /haproxy Backend/).click

if !File.exists?(overview) || !File.exists?(availability)
  # Quick copy/paste job from above SLOReporter class to capture the overview boards
  browser.div(aria_label: /50th Percentile Latency over Time/).wait_until(&:present?)
  sleep Watir.default_timeout

  css_selector = '.sidemenu, .navbar, .submenu-controls'
  browser.execute_script(
    "[...document.querySelectorAll('#{css_selector}')].map(e => {e.parentNode.removeChild(e)})"
  )

  overview_tmp = 'tmp/screenshots/tmp-all-overview.png'
  unless File.exists? overview
    browser.screenshot.save overview_tmp
    $threads << Thread.new do
      system "pngcrush -reduce -brute #{overview_tmp} '#{overview}'"
      system "rm #{overview_tmp}"
    end
  end

  browser.link(visible_text: /All - Details/).click
  browser.link(visible_text: /Availability Grid/).click
  sleep Watir.default_timeout
  bad_backends = %w[arcgis_back gsa_api_back iam_ssoe_oauthe_back iam_ssoe_sts_back lighthouse_gateway_back]
  bad_backends.each do |backend|
    gradient = 'linear-gradient(120deg, rgb(29, 29, 29), rgb(51, 51, 51))'
    browser.execute_script(
      %{[...document.querySelectorAll("span")]} +
       %{.filter(e => e.textContent.includes("N/A"))} +
       %{.forEach(e => e.parentElement.parentElement.parentElement.parentElement.style.backgroundImage = '#{gradient}')}
    )
  end

  availability_tmp = 'tmp/screenshots/tmp-availability-overview.png'
  unless File.exists? availability
    browser.screenshot.save availability_tmp
    $threads << Thread.new do
      system "pngcrush -reduce -brute #{availability_tmp} '#{availability}'"
      system "rm #{availability_tmp}"
    end
  end
end

backends.each do |backend|
  spinner = TTY::Spinner.new("[:spinner] Capturing dashboard screenshot for #{backend}...", format: :pulse_3)
  reporter = SLOReporter.new(browser, backend)
  reporter.capture_and_compress_screenshot
  spinner.success('success')
end

puts 'Waiting for pngcrush threads to finish'
$threads.each(&:join)
