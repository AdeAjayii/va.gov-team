

Date: 11/29/2023

Joshua Matulonis - josh.matulonis@oddball.io


**Jump to:**

[Summary](#Summary)

[Introduction](#Introduction)

[Passkeys](#Passkeys)

[FIDO](#FIDO)

[Appendix](#appendix)

#Summary


# Introduction
The ever-increasing number of accounts that users have to manage are burdening factors, as users frequently forget their passwords, resulting in losing access to their accounts.


## Passkeys
- Passkeys refer only to WebAuthn/FIDO credentials, and not to the many other keys and protocols, such as PIV, OTP, or OpenPGP Card, available in the YubiKey 5 Series.
Any passwordless FIDO credential is a passkey. 
- Passkeys are a password replacement that provide faster, easier, and more secure sign-ins to websites and apps across a user’s devices. 
- Unlike passwords, passkeys are resistant to phishing, are always strong, and are designed so that there are no shared secrets.
- They simplify account registration for apps and websites, are easy to use, work across all of a user’s devices, and even other devices within physical proximity.
- From a technical standpoint, passkeys are FIDO credentials that are discoverable by browsers or housed within native applications or security keys for passwordless authentication. 
- Passkeys replace passwords with cryptographic key pairs for phishing-resistant sign-in security and an improved user experience. The cryptographic keys are used from end-user devices (computers, phones, or security keys) for user authentication.
- Passkeys that are managed by phone or computer operating systems are automatically synced between the user’s devices via a cloud service. The cloud service also stores an encrypted copy of the FIDO credential. 

- Single-device passkeys : Designed to be available only from a single device from which they cannot be copied. For example, a physical security key could contain multiple single-device passkeys.
- Synced passkeys : Passkeys that are synced between user’s devices via a cloud service.
- Device-bound passkeys : Those that never leave a single device (including those on UAF apps).

### Creating a Passkey
- Passkey creation can happen when a new user registers for an account, or when an authenticated user desires to create one for their existing account. 

- Passkey creation is triggered on the client (e.g. ”Create a passkey” button), initiating a three-step sequence:

1. On behalf of the user, the client (a web app running in the browser or a native app) requests a random challenge from the server.
2. The client then calls the WebAuthn API with credentials.create(challenge), handing over the challenge, which results in a key pair – a private & a public key – being created on the device (usually a phone or computer, called “Authenticator” in the WebAuthn context). 
The private key (i.e. the passkey) is used to sign the challenge and stored on the user’s device inside secure hardware like a TPM or secure enclave. The matching public key, a credential ID, as well as the signed challenge are returned by the function. 
- The user may get prompted for verification with a biometric or a PIN during this step.
3. To finalize passkey registration, the client now sends the public key, the credential ID, and the signed challenge back to the server. 
- The server associates the public key and the credential ID with the user for future authentication flows and checks the validity of the operation by verifying the signed challenge with the public key.

### Authenticating with a Passkey
- Unlike a password that has to be sent over to the authenticating server, a passkey does not leave the user’s device to sign in. 

- Instead, the passkey is used locally to create a unique cryptographic signature that proves to the server that it has been created with the passkey. 

The sequence for passkey authentication is, again, triggered by the user on the client (”Sign in with a passkey” button):

1. The client requests a random challenge from the server.


## FIDO Authentication Features
FIDO Authentication categorized by user interactions:
- Touch
  - Touch security key for user presence check
- Type
  - Type client PIN or screen-unlocking PIN
- Scan
  - Fingerprint scan
  - Vein scan
  - Iris scan (look into camera)
  - Face scan
- Speak
  - Voice recognition
- Move
  - Insert a security key in a USB port
  - Scan security keys via NFC with smart phones
  - Draw a pattern on screen to unlock smart phones
  - Activate buttons for actions
  - Touch screen for selecting actions
  - Use mouse or alternative input devices for selecting actions
  - QR code scan for pairing a device
- Read
  - Instructions on screen
- Timer
  - Complete authentication within limited time
